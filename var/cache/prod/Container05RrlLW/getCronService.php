<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'Contao\CoreBundle\Cron\Cron' shared service.

include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'contao'.\DIRECTORY_SEPARATOR.'core-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Cron'.\DIRECTORY_SEPARATOR.'Cron.php';
include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'contao'.\DIRECTORY_SEPARATOR.'core-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Cron'.\DIRECTORY_SEPARATOR.'CronJob.php';
include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'contao'.\DIRECTORY_SEPARATOR.'core-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Cron'.\DIRECTORY_SEPARATOR.'LegacyCron.php';
include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'contao'.\DIRECTORY_SEPARATOR.'core-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Cron'.\DIRECTORY_SEPARATOR.'PurgeExpiredDataCron.php';

$this->services['Contao\\CoreBundle\\Cron\\Cron'] = $instance = new \Contao\CoreBundle\Cron\Cron(($this->privates['Contao\\CoreBundle\\Repository\\CronJobRepository'] ?? $this->load('getCronJobRepositoryService.php')), ($this->services['doctrine.orm.default_entity_manager'] ?? $this->load('getDoctrine_Orm_DefaultEntityManagerService.php')), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));

$a = ($this->services['contao.framework'] ?? $this->getContao_FrameworkService());

$b = new \Contao\CoreBundle\Cron\LegacyCron($a);

$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($b, '* * * * *', 'onMinutely'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($b, '@hourly', 'onHourly'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($b, '@daily', 'onDaily'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($b, '@weekly', 'onWeekly'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($b, '@monthly', 'onMonthly'));
$instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob(new \Contao\CoreBundle\Cron\PurgeExpiredDataCron($a, ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService())), '@hourly', 'onHourly'));

return $instance;
